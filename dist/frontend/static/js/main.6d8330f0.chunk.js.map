{"version":3,"sources":["components/Cell/Cell.js","components/Grid/Grid.js","services/Robot.js","components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","cellClick","x","y","classNames","active","push","react_default","a","createElement","className","join","React","Component","Grid","width","height","state","robot","onChange","_this2","then","setState","prevProps","rows","Cell_Cell_Cell","key","concat","Robot","RobotService","console","log","fetch","response","json","heading","method","headers","Content-Type","body","JSON","stringify","direction","Controls","directionChange","move","rotateLeft","rotateRight","place","e","target","value","_this3","robotService","_this4","_this5","_this6","destroyRobot","Grid_Grid_Grid","App","report","Controls_Controls_Controls","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d8330f0.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Cell.scss';\n\nexport default class Cell extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n    }\n\n    // cell click\n    onClick() {\n        // can we click the cell?\n        if (this.props.cellClick) {\n            return this.props.cellClick(this.props.x, this.props.y);\n        }\n    }\n\n    render() {\n        let classNames = ['cell'];\n\n        // if the robot is in the cell\n        if (this.props.active) {\n            // mark it as active\n            classNames.push('active');\n        }\n\n        return (<div className={classNames.join(' ')}\n            onClick={this.onClick}>\n        </div>);\n    }\n}","import React from 'react';\n\nimport Cell from '../Cell/Cell';\n\nimport './Grid.scss';\n\nexport default class Grid extends React.Component {\n    // grid height\n    width = 5;\n\n    // grid width\n    height = 5;\n\n    // set the default state (invalid position)\n    state = {\n        robot: {\n            x: -1,\n            y: -1\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state.robot = props.robot;\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange() {\n        return this.props.onChange()\n            .then((robot) => {\n                this.setState({ robot });\n\n                return robot;\n            });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.robot !== this.props.robot) {\n            this.setState({\n                robot: this.props.robot\n            });\n        }\n    }\n\n    render() {\n        // we have no rows yet\n        let rows = [];\n\n        if (!this.props.robot) {\n            // we don't yet have a robot so don't display the grid\n            return null;\n        }\n\n        for (let y = 0; y < this.height; y++) {\n            // create empty row\n            rows[y] = [];\n\n            for (let x = 0; x < this.width; x++) {\n                let active = false;\n\n                // is the robot at current cell?\n                if (this.state.robot && this.state.robot.x === x && this.state.robot.y === (4 - y)) {\n                    // if yieldExpression.apply.\n                    active = true;\n                }\n\n                // dynamically create the grid, and change the maths so X is the SOUTH WEST\n                rows[y][x] = <Cell x={x}\n                    y={4 - y}\n                    active={active}\n                    onChange={this.onChange}\n                    cellClick={this.props.cellClick}\n                    key={`${x}${y}`\n                    } />\n            }\n        }\n\n        return (<div className=\"grid\">\n            {rows}\n        </div>);\n    }\n}","class RobotService {\n    constructor() {\n        console.log('init');\n    }\n\n    // call the move API\n    move() {\n        return fetch('/move')\n            .then((response) => {\n                return response.json();\n            });\n    }\n\n    // call the palce API with details of selected cell\n    place(x, y, heading) {\n        return fetch(\n            '/place',\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    \"x\": x,\n                    \"y\": y,\n                    \"direction\": heading\n                })\n            }\n        )\n    }\n\n    // get the ouput of the report API\n    report() {\n        return fetch('/report')\n            .then((response) => {\n                return response.json();;\n            })\n    }\n\n    rotateLeft() {\n        return fetch('/left')\n            .then((response) => {\n                return response.json();;\n            })\n    }\n\n    rotateRight() {\n        return fetch('/right')\n            .then((response) => {\n                return response.json();;\n            })\n    }\n}\n\nexport default new RobotService();","import React from 'react';\n\nimport Grid from '../Grid/Grid';\n\nimport robotService from '../../services/Robot';\n\nimport './Controls.scss';\n\nexport default class Controls extends React.Component {\n    // set the default state (invalid position)\n    state = {\n        direction: 'NORTH',\n        robot: {\n            direction: null,\n            x: -1,\n            y: -1\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n        this.directionChange = this.directionChange.bind(this);\n        this.cellClick = this.cellClick.bind(this);\n\n        this.move = this.move.bind(this);\n        this.rotateLeft = this.rotateLeft.bind(this);\n        this.rotateRight = this.rotateRight.bind(this);\n        this.place = this.place.bind(this);\n    }\n\n    // onchange lets always make sure we have the most upto date robot through out the app\n    onChange() {\n        return this.props.onChange()\n            .then((robot) => {\n                this.setState({ robot });\n\n                return robot;\n            });\n    }\n\n    // update ui with selected direction\n    directionChange(e) {\n        this.setState({\n            direction: e.target.value\n        });\n    }\n\n    // what happens when i click one of the grid cells\n    cellClick(x, y) {\n        robotService.place(x, y, this.state.direction)\n            .then(() => {\n                this.onChange();\n            });\n    }\n\n    // the onCLick for the \"move\" button\n    move() {\n        // call the standalone robot service\n        robotService.move()\n            .then(() => {\n                this.onChange();\n            })\n    }\n\n    // the onClick for the \"left\" button\n    rotateLeft() {\n        // call the standalone robot service\n        robotService.rotateLeft()\n            .then(() => {\n                this.onChange();\n            })\n    }\n\n    // the onClick for the \"right\" button\n    rotateRight() {\n        // call the standalone robot service\n        robotService.rotateRight()\n            .then(() => {\n                this.onChange();\n            })\n    }\n\n    // the onClick for the \"place\" button\n    place() {\n        // mock the robot to an invalid one so we can show the grid component\n        this.setState({\n            robot: {\n                direction: null,\n                x: -1,\n                y: -1\n            }\n        });\n\n        // removes the robot from parent state, to hide main grid\n        this.props.destroyRobot();\n    }\n\n    render() {\n        // do we have a robot?\n        if (!this.props.robot) {\n            // if not (first load)\n            return <div className=\"controls\">\n                <select value={this.state.direction}\n                    onChange={this.directionChange}>\n                    <option value='NORTH'>North</option>\n                    <option value='EAST'>East</option>\n                    <option value='SOUTH'>South</option>\n                    <option value='WEST'>West</option>\n                </select>\n\n                <Grid onChange={this.onChange}\n                    cellClick={this.cellClick}\n                    robot={this.state.robot} />\n            </div>\n        }\n\n        // no, we can palce it then\n        return (<div className=\"controls\">\n            <div className=\"controls\">\n                <button onClick={this.rotateLeft}>Rotate left</button>\n                <button onClick={this.rotateRight}>Rotate Right</button>\n                <button onClick={this.move}>Move</button>\n                |\n                <button onClick={this.place}>Place</button>\n            </div>\n        </div>);\n    }\n}","import React from 'react';\nimport Grid from './components/Grid/Grid';\nimport Controls from './components/Controls/Controls';\n\nimport robotService from './services/Robot';\n\nimport './App.scss';\n\nexport default class App extends React.Component {\n  // set the default state (invalid position)\n  state = {\n    robot: null\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.destroyRobot = this.destroyRobot.bind(this);\n  }\n\n  destroyRobot() {\n    this.setState({ robot: null });\n  }\n\n  // when anything within the app changes, i want to be able to get the most up to date version of the robot\n  // strictly speaking this isnt needed as each endpoint returns the robot\n  onChange() {\n    return robotService.report()\n      .then((response) => {\n        this.setState({\n          robot: response\n        });\n\n        return response;\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Controls onChange={this.onChange}\n          robot={this.state.robot}\n          destroyRobot={this.destroyRobot} />\n        <Grid onChange={this.onChange}\n          robot={this.state.robot} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}